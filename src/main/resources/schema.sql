-- CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
--
-- create table CCO_USER(
--     userId UUID  default uuid_generate_v4(),
--     firstName varchar (100),
--     lastName varchar(100),
--     gender varchar(10),
--     password varchar(250),
--     bDate date,
--     nationality varchar(50),
--     email varchar(100),
--     isAdmin boolean,
--     address varchar(250),
--     primary key (userId)
-- );
--
--  create table COMMENT(
--      commentId UUID default uuid_generate_v4(),
--      commentDate date,
--      content varchar(250),
--      numberOfLikes bigint,
--      numberOfDislikes bigint,
--      isPinned boolean,
--      userId UUID,
--      childCommentId UUID,
--      creationId UUID,
--      primary key (commentId)
--
--  );
--
-- create table READ_LIST(
--     readListId UUID default uuid_generate_v4(),
--     readListName varchar (250),
--     description varchar (1000),
--     upVote bigint,
--     quantity bigint,
--     userId UUID
----     creationName varchar (250),
----     saleOnly boolean,
----     salePrice numeric,
----     numberOfLikes bigint,
----     numberOdDislikes bigint,
----     coverImageURI varchar (250),
----     description varchar (250)
-- );
--
--create table creation(
--    creationId default uuid_generate_v4(),
--    creationName varchar (50) not null,
--    releaseDate Date,
--    releaseStatus boolean,
--    saleOnly boolean,
--    salePrice numeric,
--    numberOfLikes bigint,
--    numberOfDislikes bigint,
--    coverImageURI varchar (250),
--    description varchar (1000),
--    tags varchar (1000),
--    creatorId UUID,
--    primary key (creationId)
--);
--
-- create table CHAPTER(
--     chapterNumber int,
--     chapterName varchar (250),
--     chapterDescription varchar (4000),
--     chapterImageURI varchar (250),
--
--     creationId UUID,
--     primary key (chapterNumber)
-- );
--
-- create table PARAGRAPH (
--     paragraphNumber int,
--     paragraphContent varchar (250),
--     paragraphImageURI varchar (250),
--
--     chapterNumber int,
--     primary key (paragraphNumber)
-- );
--
-- create table PAYMENT(
--     paymentId UUID default uuid_generate_v4(),
--     paymentName varchar (100),
--     primary key (paymentId)
-- );
--
-- create table ORDER(
--     orderId UUID default uuid_generate_v4(),
--     status varchar (250),
--     totalPrice real,
--     paidDay date,
--     paymentName varchar (100),
--     readerId  UUID,
--     primary key(orderId)
-- );
--
-- create table READER(
--     readingTime date,
--     isShowInfo varchar (100),
--     nickName   varchar (100)
-- );
--
-- create table  CREATOR(
--    penName varchar (100),
--     numberOfContents bigint,
--     numberOfFollowers bigint,
-- );
--
-- create table GENRE(
--     genreId UUID default uuid_generate_v4() primary key,
--     genreName varchar(250),
--     primary key(genreId)
-- );
--
-- create table JOIN_TIER(
--     tierNumber bigint,
--     tierTitle  varchar(1000),
--     tierContent varchar(10000),
--     tierImageURI   varchar(250),
--     price numeric,
--     isCharged boolean,
--     status boolean,
--     creatorId UUID,
--     primary key(tierNumber)
-- );
--
--create table TRANSACTION{
--    id UUID default uuid_generate_v4(),
--    paymentName varchar(250),
--    joinDate Date,
--    price numeric,
--    tierNumber int,
--    readerId UUID,
--    primary key(id)
--}
--
-- create table CONTAINS(
--     id UUID default uuid_generate_v4(),
--     readListId UUID,
--     creationId UUID,
--     primary key(id)
-- );
--
--  create table IS_USED(
--      id UUID default uuid_generate_v4(),
--      paymentId UUID,
--      userId UUID,
--      accountNumber varchar (50),
--      primary key(id)
--  );
--
-- create table HAS_CREATION(
--     id UUID default uuid_generate_v4(),
--
--     orderId UUID,
--     creationId UUID,
--     price DOUBLE,
--     primary key(id)
-- );
--
-- create table HAS_GENRE(
--    id UUID default uuid_generate_v4(),
--    genreId UUID,
--    readListId UUID,
--    primary key(id)
--
-- );
--
--  create table IS_AVAILABLE_IN(
--      id UUID default uuid_generate_v4(),
--
--      tierNumber bigint,
--      creationId UUID,
--      discountForSaleCreation numeric,
--
--      primary key(id)
--  );
--
--   create table INTERESTED_IN(
--       id UUID default uuid_generate_v4(),
--       readerId UUID,
--       genreId UUID,
--       primary key(id)
--   );
--
-- create table BELONGS(
--     id UUID default uuid_generate_v4(),
--
--     genreId UUID,
--     creationId UUID,
--
--     primary key(id)
-- );
--
--
--CREATE OR REPLACE FUNCTION get_total_cco_users()
--RETURNS INTEGER AS $$
--DECLARE
--    total_users INTEGER;
--BEGIN
--    -- Tính tổng số người dùng trong bảng CCO_USER
--    SELECT COUNT(*) INTO total_users FROM CCO_USER;
--
--    -- Trả về tổng số người dùng
--    RETURN total_users;
--END;
--$$ LANGUAGE plpgsql;

--CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
--
--create table CCO_USER(
--    userId UUID default uuid_generate_v4(),
--    firstName varchar(100),
--    lastName varchar(100),
--    gender varchar(10),
--    password varchar(250),
--    bDate date,
--    nationality varchar(50),
--    email varchar(100),
--    isAdmin boolean,
--    address varchar(250),
--    primary key (userId)
--);
--
--create table COMMENT(
--    commentId UUID default uuid_generate_v4(),
--    commentDate date,
--    content varchar(250),
--    numberOfLikes bigint,
--    numberOfDislikes bigint,
--    isPinned boolean,
--    userId UUID,
--    childCommentId UUID,
--    creationId UUID,
--    primary key (commentId)
--);
--
--create table READ_LIST(
--    readListId UUID default uuid_generate_v4(),
--    readListName varchar(250),
--    description varchar(1000),
--    upVote bigint,
--    quantity bigint,
--    userId UUID,
--    primary key (readListId)
--);
--
--create table "creation"(
--    creationId UUID default uuid_generate_v4(),
--    creationName varchar(50) not null,
--    releaseDate date,
--    releaseStatus boolean,
--    saleOnly boolean,
--    salePrice numeric,
--    numberOfLikes bigint,
--    numberOfDislikes bigint,
--    coverImageURI varchar(250),
--    description varchar(1000),
--    tags varchar(1000),
--    creatorId UUID,
--    primary key (creationId)
--);
--
--create table CHAPTER(
--    chapterNumber int,
--    chapterName varchar(250),
--    chapterDescription varchar(4000),
--    chapterImageURI varchar(250),
--    creationId UUID,
--    primary key (chapterNumber),
--    foreign key (creationId) references "creation"(creationId)
--);
--
--create table PARAGRAPH(
--    paragraphNumber int,
--    paragraphContent varchar(250),
--    paragraphImageURI varchar(250),
--    chapterNumber int,
--    primary key (paragraphNumber),
--    foreign key (chapterNumber) references CHAPTER(chapterNumber)
--);
--
--create table PAYMENT(
--    paymentId UUID default uuid_generate_v4(),
--    paymentName varchar(100),
--    primary key (paymentId)
--);
--
--create table "ORDERS"(
--    orderId UUID default uuid_generate_v4(),
--    status varchar(250),
--    totalPrice real,
--    paidDay date,
--    paymentName varchar(100),
--    readerId UUID,
--    primary key (orderId),
--    foreign key (readerId) references READER(readerId)
--);
--
--
--create table READER(
--userId UUID PRIMARY KEY,
--readingTime date,
--isShowInfo varchar(100),
--nickName varchar(100),
--foreign key (userId) references CCO_USER(userId) )
--
--create table CREATOR(
--    userId UUID PRIMARY KEY,
--    penName varchar(100),
--    numberOfContents bigint,
--    numberOfFollowers bigint,
--    foreign key (userId) references CCO_USER(userId)
--);
--
--create table GENRE(
--    genreId UUID default uuid_generate_v4() primary key,
--    genreName varchar(250)
--);
--
--create table JOIN_TIER(
--    tierNumber bigint,
--    tierTitle varchar(1000),
--    tierContent varchar(10000),
--    tierImageURI varchar(250),
--    price numeric,
--    isCharged boolean,
--    status boolean,
--    creatorId UUID,
--    primary key (tierNumber),
--    foreign key (creatorId) references CREATOR(userId)
--);
--
--create table "transactions"(
--    id UUID default uuid_generate_v4(),
--    paymentName varchar(250),
--    joinDate date,
--    price numeric,
--    tierNumber int,
--    readerId UUID,
--    primary key (id),
--    foreign key (readerId) references READER(readerId),
--    foreign key (tierNumber) references JOIN_TIER(tierNumber)
--);
--
--create table CONTAINS(
--    id UUID default uuid_generate_v4(),
--    readListId UUID,
--    creationId UUID,
--    primary key (id),
--    foreign key (readListId) references READ_LIST(readListId),
--    foreign key (creationId) references "creation"(creationId)
--);
--
--create table IS_USED(
--    id UUID default uuid_generate_v4(),
--    paymentId UUID,
--    userId UUID,
--    accountNumber varchar(50),
--    primary key (id),
--    foreign key (paymentId) references PAYMENT(paymentId),
--    foreign key (userId) references CCO_USER(userId)
--);
--
--create table HAS_CREATION(
--    id UUID default uuid_generate_v4(),
--    orderId UUID,
--    creationId UUID,
--    price DOUBLE,
--    primary key (id),
--    foreign key (orderId) references "ORDER"(orderId),
--    foreign key (creationId) references "creation"(creationId)
--);
--
--create table HAS_GENRE(
--    id UUID default uuid_generate_v4(),
--    genreId UUID,
--    readListId UUID,
--    primary key (id),
--    foreign key (genreId) references GENRE(genreId),
--    foreign key (readListId) references READ_LIST(readListId)
--);
--
--create table IS_AVAILABLE_IN(
--    id UUID default uuid_generate_v4(),
--    tierNumber bigint,
--    creationId UUID,
--    discountForSaleCreation numeric,
--    primary key (id),
--    foreign key (tierNumber) references JOIN_TIER(tierNumber),
--    foreign key (creationId) references "creation"(creationId)
--);
--
--create table INTERESTED_IN(
--    id UUID default uuid_generate_v4(),
--    readerId UUID,
--    genreId UUID,
--    primary key (id),
--    foreign key (readerId) references READER(readerId),
--    foreign key (genreId) references GENRE(genreId)
--);
--
--create table BELONGS(
--    id UUID default uuid_generate_v4(),
--    genreId UUID,
--    creationId UUID,
--    primary key (id),
--    foreign key (genreId) references GENRE(genreId),
--    foreign key (creationId) references "creation"(creationId)
--);


